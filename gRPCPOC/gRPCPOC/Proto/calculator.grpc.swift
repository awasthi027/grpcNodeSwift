//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: calculator.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `CalServiceClient`, then call methods of this protocol to make API calls.
internal protocol CalServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: CalServiceClientInterceptorFactoryProtocol? { get }

  func addNum(
    _ request: AddRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<AddRequest, AddResponse>

  func fiboSeries(
    _ request: FiboRequest,
    callOptions: CallOptions?,
    handler: @escaping (FiboResponse) -> Void
  ) -> ServerStreamingCall<FiboRequest, FiboResponse>

  func computeAverage(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<ComputeAverageRequest, ComputeAverageResponse>

  func findMaximum(
    callOptions: CallOptions?,
    handler: @escaping (FindMaximumResponse) -> Void
  ) -> BidirectionalStreamingCall<FindMaximumRequest, FindMaximumResponse>
}

extension CalServiceClientProtocol {
  internal var serviceName: String {
    return "CalService"
  }

  /// Unary RPC method
  ///
  /// - Parameters:
  ///   - request: Request to send to AddNum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addNum(
    _ request: AddRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<AddRequest, AddResponse> {
    return self.makeUnaryCall(
      path: CalServiceClientMetadata.Methods.addNum.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddNumInterceptors() ?? []
    )
  }

  /// Server Streaming RPC method
  ///
  /// - Parameters:
  ///   - request: Request to send to FiboSeries.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func fiboSeries(
    _ request: FiboRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (FiboResponse) -> Void
  ) -> ServerStreamingCall<FiboRequest, FiboResponse> {
    return self.makeServerStreamingCall(
      path: CalServiceClientMetadata.Methods.fiboSeries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFiboSeriesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Client Streaming RPC method
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func computeAverage(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<ComputeAverageRequest, ComputeAverageResponse> {
    return self.makeClientStreamingCall(
      path: CalServiceClientMetadata.Methods.computeAverage.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComputeAverageInterceptors() ?? []
    )
  }

  /// Bidirectional Streaming RPC method
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func findMaximum(
    callOptions: CallOptions? = nil,
    handler: @escaping (FindMaximumResponse) -> Void
  ) -> BidirectionalStreamingCall<FindMaximumRequest, FindMaximumResponse> {
    return self.makeBidirectionalStreamingCall(
      path: CalServiceClientMetadata.Methods.findMaximum.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindMaximumInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension CalServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "CalServiceNIOClient")
internal final class CalServiceClient: CalServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: CalServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: CalServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the CalService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CalServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct CalServiceNIOClient: CalServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: CalServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the CalService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CalServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol CalServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: CalServiceClientInterceptorFactoryProtocol? { get }

  func makeAddNumCall(
    _ request: AddRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<AddRequest, AddResponse>

  func makeFiboSeriesCall(
    _ request: FiboRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<FiboRequest, FiboResponse>

  func makeComputeAverageCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<ComputeAverageRequest, ComputeAverageResponse>

  func makeFindMaximumCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<FindMaximumRequest, FindMaximumResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CalServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return CalServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: CalServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAddNumCall(
    _ request: AddRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<AddRequest, AddResponse> {
    return self.makeAsyncUnaryCall(
      path: CalServiceClientMetadata.Methods.addNum.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddNumInterceptors() ?? []
    )
  }

  internal func makeFiboSeriesCall(
    _ request: FiboRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<FiboRequest, FiboResponse> {
    return self.makeAsyncServerStreamingCall(
      path: CalServiceClientMetadata.Methods.fiboSeries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFiboSeriesInterceptors() ?? []
    )
  }

  internal func makeComputeAverageCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<ComputeAverageRequest, ComputeAverageResponse> {
    return self.makeAsyncClientStreamingCall(
      path: CalServiceClientMetadata.Methods.computeAverage.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComputeAverageInterceptors() ?? []
    )
  }

  internal func makeFindMaximumCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<FindMaximumRequest, FindMaximumResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: CalServiceClientMetadata.Methods.findMaximum.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindMaximumInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CalServiceAsyncClientProtocol {
  internal func addNum(
    _ request: AddRequest,
    callOptions: CallOptions? = nil
  ) async throws -> AddResponse {
    return try await self.performAsyncUnaryCall(
      path: CalServiceClientMetadata.Methods.addNum.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddNumInterceptors() ?? []
    )
  }

  internal func fiboSeries(
    _ request: FiboRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<FiboResponse> {
    return self.performAsyncServerStreamingCall(
      path: CalServiceClientMetadata.Methods.fiboSeries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFiboSeriesInterceptors() ?? []
    )
  }

  internal func computeAverage<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> ComputeAverageResponse where RequestStream: Sequence, RequestStream.Element == ComputeAverageRequest {
    return try await self.performAsyncClientStreamingCall(
      path: CalServiceClientMetadata.Methods.computeAverage.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComputeAverageInterceptors() ?? []
    )
  }

  internal func computeAverage<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> ComputeAverageResponse where RequestStream: AsyncSequence & Sendable, RequestStream.Element == ComputeAverageRequest {
    return try await self.performAsyncClientStreamingCall(
      path: CalServiceClientMetadata.Methods.computeAverage.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComputeAverageInterceptors() ?? []
    )
  }

  internal func findMaximum<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<FindMaximumResponse> where RequestStream: Sequence, RequestStream.Element == FindMaximumRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: CalServiceClientMetadata.Methods.findMaximum.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindMaximumInterceptors() ?? []
    )
  }

  internal func findMaximum<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<FindMaximumResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == FindMaximumRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: CalServiceClientMetadata.Methods.findMaximum.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindMaximumInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct CalServiceAsyncClient: CalServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: CalServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CalServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol CalServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'addNum'.
  func makeAddNumInterceptors() -> [ClientInterceptor<AddRequest, AddResponse>]

  /// - Returns: Interceptors to use when invoking 'fiboSeries'.
  func makeFiboSeriesInterceptors() -> [ClientInterceptor<FiboRequest, FiboResponse>]

  /// - Returns: Interceptors to use when invoking 'computeAverage'.
  func makeComputeAverageInterceptors() -> [ClientInterceptor<ComputeAverageRequest, ComputeAverageResponse>]

  /// - Returns: Interceptors to use when invoking 'findMaximum'.
  func makeFindMaximumInterceptors() -> [ClientInterceptor<FindMaximumRequest, FindMaximumResponse>]
}

internal enum CalServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CalService",
    fullName: "CalService",
    methods: [
      CalServiceClientMetadata.Methods.addNum,
      CalServiceClientMetadata.Methods.fiboSeries,
      CalServiceClientMetadata.Methods.computeAverage,
      CalServiceClientMetadata.Methods.findMaximum,
    ]
  )

  internal enum Methods {
    internal static let addNum = GRPCMethodDescriptor(
      name: "AddNum",
      path: "/CalService/AddNum",
      type: GRPCCallType.unary
    )

    internal static let fiboSeries = GRPCMethodDescriptor(
      name: "FiboSeries",
      path: "/CalService/FiboSeries",
      type: GRPCCallType.serverStreaming
    )

    internal static let computeAverage = GRPCMethodDescriptor(
      name: "ComputeAverage",
      path: "/CalService/ComputeAverage",
      type: GRPCCallType.clientStreaming
    )

    internal static let findMaximum = GRPCMethodDescriptor(
      name: "FindMaximum",
      path: "/CalService/FindMaximum",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

