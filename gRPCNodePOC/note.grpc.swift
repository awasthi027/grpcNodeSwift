//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: note.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `NoteServiceClient`, then call methods of this protocol to make API calls.
internal protocol NoteServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: NoteServiceClientInterceptorFactoryProtocol? { get }

  func greeting(
    _ request: GreetingInput,
    callOptions: CallOptions?
  ) -> UnaryCall<GreetingInput, GreetingMessage>

  func getSampleNote(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Empty, SampleNote>

  func getNotes(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Empty, NoteList>

  func addNote(
    _ request: Note,
    callOptions: CallOptions?
  ) -> UnaryCall<Note, Note>

  func deleteNote(
    _ request: NoteInput,
    callOptions: CallOptions?
  ) -> UnaryCall<NoteInput, Empty>

  func editNote(
    _ request: Note,
    callOptions: CallOptions?
  ) -> UnaryCall<Note, Note>
}

extension NoteServiceClientProtocol {
  internal var serviceName: String {
    return "NoteService"
  }

  /// Unary call to Greeting
  ///
  /// - Parameters:
  ///   - request: Request to send to Greeting.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func greeting(
    _ request: GreetingInput,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GreetingInput, GreetingMessage> {
    return self.makeUnaryCall(
      path: NoteServiceClientMetadata.Methods.greeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGreetingInterceptors() ?? []
    )
  }

  /// Unary call to GetSampleNote
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSampleNote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSampleNote(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Empty, SampleNote> {
    return self.makeUnaryCall(
      path: NoteServiceClientMetadata.Methods.getSampleNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSampleNoteInterceptors() ?? []
    )
  }

  /// Unary call to GetNotes
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNotes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNotes(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Empty, NoteList> {
    return self.makeUnaryCall(
      path: NoteServiceClientMetadata.Methods.getNotes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNotesInterceptors() ?? []
    )
  }

  /// Unary call to AddNote
  ///
  /// - Parameters:
  ///   - request: Request to send to AddNote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addNote(
    _ request: Note,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Note, Note> {
    return self.makeUnaryCall(
      path: NoteServiceClientMetadata.Methods.addNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddNoteInterceptors() ?? []
    )
  }

  /// Unary call to DeleteNote
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteNote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteNote(
    _ request: NoteInput,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<NoteInput, Empty> {
    return self.makeUnaryCall(
      path: NoteServiceClientMetadata.Methods.deleteNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteNoteInterceptors() ?? []
    )
  }

  /// Unary call to EditNote
  ///
  /// - Parameters:
  ///   - request: Request to send to EditNote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editNote(
    _ request: Note,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Note, Note> {
    return self.makeUnaryCall(
      path: NoteServiceClientMetadata.Methods.editNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditNoteInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension NoteServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "NoteServiceNIOClient")
internal final class NoteServiceClient: NoteServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: NoteServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: NoteServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the NoteService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: NoteServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct NoteServiceNIOClient: NoteServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: NoteServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the NoteService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: NoteServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol NoteServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: NoteServiceClientInterceptorFactoryProtocol? { get }

  func makeGreetingCall(
    _ request: GreetingInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GreetingInput, GreetingMessage>

  func makeGetSampleNoteCall(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Empty, SampleNote>

  func makeGetNotesCall(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Empty, NoteList>

  func makeAddNoteCall(
    _ request: Note,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Note, Note>

  func makeDeleteNoteCall(
    _ request: NoteInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<NoteInput, Empty>

  func makeEditNoteCall(
    _ request: Note,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Note, Note>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension NoteServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return NoteServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: NoteServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGreetingCall(
    _ request: GreetingInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GreetingInput, GreetingMessage> {
    return self.makeAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.greeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGreetingInterceptors() ?? []
    )
  }

  internal func makeGetSampleNoteCall(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Empty, SampleNote> {
    return self.makeAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.getSampleNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSampleNoteInterceptors() ?? []
    )
  }

  internal func makeGetNotesCall(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Empty, NoteList> {
    return self.makeAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.getNotes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNotesInterceptors() ?? []
    )
  }

  internal func makeAddNoteCall(
    _ request: Note,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Note, Note> {
    return self.makeAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.addNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddNoteInterceptors() ?? []
    )
  }

  internal func makeDeleteNoteCall(
    _ request: NoteInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<NoteInput, Empty> {
    return self.makeAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.deleteNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteNoteInterceptors() ?? []
    )
  }

  internal func makeEditNoteCall(
    _ request: Note,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Note, Note> {
    return self.makeAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.editNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditNoteInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension NoteServiceAsyncClientProtocol {
  internal func greeting(
    _ request: GreetingInput,
    callOptions: CallOptions? = nil
  ) async throws -> GreetingMessage {
    return try await self.performAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.greeting.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGreetingInterceptors() ?? []
    )
  }

  internal func getSampleNote(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) async throws -> SampleNote {
    return try await self.performAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.getSampleNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSampleNoteInterceptors() ?? []
    )
  }

  internal func getNotes(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) async throws -> NoteList {
    return try await self.performAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.getNotes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNotesInterceptors() ?? []
    )
  }

  internal func addNote(
    _ request: Note,
    callOptions: CallOptions? = nil
  ) async throws -> Note {
    return try await self.performAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.addNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddNoteInterceptors() ?? []
    )
  }

  internal func deleteNote(
    _ request: NoteInput,
    callOptions: CallOptions? = nil
  ) async throws -> Empty {
    return try await self.performAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.deleteNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteNoteInterceptors() ?? []
    )
  }

  internal func editNote(
    _ request: Note,
    callOptions: CallOptions? = nil
  ) async throws -> Note {
    return try await self.performAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.editNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditNoteInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct NoteServiceAsyncClient: NoteServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: NoteServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: NoteServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol NoteServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'greeting'.
  func makeGreetingInterceptors() -> [ClientInterceptor<GreetingInput, GreetingMessage>]

  /// - Returns: Interceptors to use when invoking 'getSampleNote'.
  func makeGetSampleNoteInterceptors() -> [ClientInterceptor<Empty, SampleNote>]

  /// - Returns: Interceptors to use when invoking 'getNotes'.
  func makeGetNotesInterceptors() -> [ClientInterceptor<Empty, NoteList>]

  /// - Returns: Interceptors to use when invoking 'addNote'.
  func makeAddNoteInterceptors() -> [ClientInterceptor<Note, Note>]

  /// - Returns: Interceptors to use when invoking 'deleteNote'.
  func makeDeleteNoteInterceptors() -> [ClientInterceptor<NoteInput, Empty>]

  /// - Returns: Interceptors to use when invoking 'editNote'.
  func makeEditNoteInterceptors() -> [ClientInterceptor<Note, Note>]
}

internal enum NoteServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NoteService",
    fullName: "NoteService",
    methods: [
      NoteServiceClientMetadata.Methods.greeting,
      NoteServiceClientMetadata.Methods.getSampleNote,
      NoteServiceClientMetadata.Methods.getNotes,
      NoteServiceClientMetadata.Methods.addNote,
      NoteServiceClientMetadata.Methods.deleteNote,
      NoteServiceClientMetadata.Methods.editNote,
    ]
  )

  internal enum Methods {
    internal static let greeting = GRPCMethodDescriptor(
      name: "Greeting",
      path: "/NoteService/Greeting",
      type: GRPCCallType.unary
    )

    internal static let getSampleNote = GRPCMethodDescriptor(
      name: "GetSampleNote",
      path: "/NoteService/GetSampleNote",
      type: GRPCCallType.unary
    )

    internal static let getNotes = GRPCMethodDescriptor(
      name: "GetNotes",
      path: "/NoteService/GetNotes",
      type: GRPCCallType.unary
    )

    internal static let addNote = GRPCMethodDescriptor(
      name: "AddNote",
      path: "/NoteService/AddNote",
      type: GRPCCallType.unary
    )

    internal static let deleteNote = GRPCMethodDescriptor(
      name: "DeleteNote",
      path: "/NoteService/DeleteNote",
      type: GRPCCallType.unary
    )

    internal static let editNote = GRPCMethodDescriptor(
      name: "EditNote",
      path: "/NoteService/EditNote",
      type: GRPCCallType.unary
    )
  }
}

